{"version":3,"sources":["component/addLable.js","component/pagination.js","component/tableData.js","component/taskForm.js","App.js","serviceWorker.js","index.js"],"names":["AddLable","props","taskList","map","row","key","index","projectName","task","taskNotes","taskStatus","className","onClick","delete","icon","faMinus","Pagination","this","postPerPage","totalPosts","paginate","nextPage","prevPage","pageNumbers","i","Math","ceil","push","href","num","Component","TableData","id","name","email","body","Form","handleChange","e","setState","target","value","filterStatus","filteredData","state","copyTask","filter","item","filterEmail","filterData","toLowerCase","indexOf","addData","handleSubmit","newTask","localTaskList","loadComponent","addClass","addNewRow","prevState","deleteRow","window","confirm","r","currentPage","fetch","then","res","json","console","log","indexofLastPage","totalPage","length","indexofFirstPage","currentPosts","slice","style","marginTop","type","faPlus","onChange","bind","required","faCheck","pageNum","React","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b5259354.chunk.js","sourcesContent":["import React from 'react';\nimport { Tr, Td } from 'react-super-responsive-table';\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinus  } from '@fortawesome/free-solid-svg-icons';\n\nconst AddLable = props => {\n    return props.taskList.map((row) => {\n    return (\n          <Tr key={row.index}>\n                <Td></Td>\n                <Td>{row.projectName}</Td>\n\t\t        <Td>{row.task}</Td>\n\t\t    \t<Td>{row.taskNotes}</Td>\n\t\t        <Td>{row.taskStatus}</Td>\n                <Td>\n\t\t\t\t\t<button className=\"btn btn-danger\" onClick={(() => props.delete(row))} ><FontAwesomeIcon icon={faMinus} /></button>\n\t\t\t\t</Td>\n          </Tr>  \n        )\n    })\n}\n\nexport default AddLable;","import React, { Component } from 'react'\n\nclass Pagination extends Component {\n    render() {\n        const {postPerPage, totalPosts, paginate, nextPage, prevPage} = this.props;\n\n        const pageNumbers = [];\n\n        for(let i=0; i <= Math.ceil(totalPosts / postPerPage); i++) {\n            pageNumbers.push(i);\n        }\n        return (\n            <nav>\n                <ul className=\"pagination justify-content center\">\n                    <li className=\"page-item\">\n                        <a className=\"page-link\" href=\"#\" onClick={() => prevPage()}>Previous</a>\n                    </li>\n                    {pageNumbers.map(num => (\n                        <li className=\"page-item\" key={num}>\n                            <a onClick={() => paginate(num)}  href=\"#\" className=\"page-link\">{num}</a>\n                        </li>\n                    ))}\n                    <li className=\"page-item\">\n                        <a className = \"page-link\" href=\"#\" onClick={() => nextPage()}>Next</a>\n                    </li>\n                </ul>\n            </nav>\n        )\n    }\n}\n\nexport default Pagination\n","import React from 'react';\nimport { Tr, Td } from 'react-super-responsive-table';\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css'\n\nconst TableData = props => {\n    return props.taskList.map((row) => {\n    return (\n        <Tr key={row.id}>\n            <Td>{row.id}</Td>\n\t\t\t<Td>{row.name}</Td>\n\t\t\t<Td>{row.email}</Td>\n\t\t\t<Td>{row.body}</Td>\n        </Tr>  \n        )\n    })\n}\n\nexport default TableData;","import React, {Fragment} from \"react\";\nimport { Table, Thead, Tbody, Tr, Th, Td } from 'react-super-responsive-table';\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus, faCheck  } from '@fortawesome/free-solid-svg-icons';\nimport AddLable from './addLable'\nimport Pagination from './pagination'\nimport TableData from './tableData'\n\n\nclass Form extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttaskList: [],\n\t\t\taddData: [],\n\t\t\tloadComponent:false,\n\t\t\taddClass: false,\n\t\t\tprojectName: \"\",\n\t\t\ttask:\"\",\n\t\t\ttaskNotes:\"\",\n\t\t\ttaskStatus:\"\",\n\t\t\tindex: 0,\n\t\t\tcopyTask: [], \n\t\t\tcurrentPage : 1,\n\t\t\tpostPerPage : 10,\n\t\t}\n\t\t\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/comments')\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({\n\t\t\t\t\taddData:json,\n\t\t\t\t\tcopyTask: json\n\t\t\t\t})\n\t\t\t\tconsole.log(this.state.copyTask)\n\t\t\t})\t\n\t}\n\n\thandleChange = (e) => {\n\t\t\n\t\tthis.setState({ [e.target.name] : e.target.value})\n\t\t\n\t}\n\n\tfilterStatus = (e) => {\n\t\tif (e.target.value !== \"all\"){\n\t\t\tvar filteredData = this.state.copyTask.filter(function(item) {\n          \t\treturn item.taskStatus === e.target.value;\n        \t});\n\t\t\tthis.setState({taskList:filteredData})\n\t\t}\n\t\telse{\n\t\t\tthis.setState({taskList:this.state.copyTask})\n\t\t}\n\t\t\n\t}\n\n\tfilterEmail = (e) => {\n\t\tif (e.target.value !== \"\"){\n\t\t\tlet filterData = this.state.copyTask.filter(function(item){\n\t\t\t\treturn item.email.toLowerCase().indexOf(e.target.value) !== -1\n\t\t\t});\n\t\t\tthis.setState({addData:filterData})\n\t\t}\n\t\t\n\t\telse{\n\t\t\tthis.setState({addData:this.state.copyTask})\n\t\t}\n\t\t\n\n\t} \n\t// editOption = (e) => {\n\t// \tthis.setState({\n\t// \t\taddClass: true\n\t// \t})\n\t// }\n\n\thandleSubmit = (e) => {\n\t\tlet newTask = {index:this.state.index++,\n\t\tprojectName: this.state.projectName,\n\t\ttask:this.state.task,\n\t\ttaskNotes:this.state.taskNotes,\n\t\ttaskStatus:this.state.taskStatus}\n\t\tlet localTaskList = this.state.taskList\n\t\tlocalTaskList.push(newTask)\n\t\tthis.setState({projectName: \"\",task: \"\",taskNotes: \"\",taskStatus: \"\",taskList:localTaskList,copyTask:localTaskList, loadComponent:false, addClass: false});\n \t\t\n \t}\n\n\taddNewRow = (e) => {\n\t\tthis.setState((prevState) => ({\n\t\t\ttaskList: [...prevState.taskList],loadComponent:true})); \n\t}\n\n\t\n\tdeleteRow= (index, e) => {\n\t\tif (window.confirm(\"Delete the item?\")){\n\t\t\tthis.setState({\n\t\t\t\ttaskList: this.state.taskList.filter(r => r !== index)\n\t\t\t});\n\t\t}\n\t}\n\n\t\n\nrender(){\n\tlet loadComponent = this.state.loadComponent\n\tlet { taskList, addData, currentPage, postPerPage} = this.state\n\tconst indexofLastPage = currentPage * postPerPage;\n\tconst totalPage = addData.length / postPerPage;\n\tconst indexofFirstPage = indexofLastPage - postPerPage;\n\tconst currentPosts = addData.slice(indexofFirstPage, indexofLastPage);\n\tconst paginate = (pageNum) => this.setState({currentPage: pageNum})\n\tconst nextPage = () => {if(this.state.currentPage<totalPage)\n\t\tthis.setState({currentPage: currentPage + 1})}\n\tconst prevPage = () => {if(this.state.currentPage>1)\n\t\tthis.setState({currentPage: currentPage - 1})\t\n\t}\n\t \n\treturn (\n\t\t<div className=\"content\">\n            <div className=\"row\" style={{marginTop:20}}>\n                <div className=\"col-sm-1\"></div>\n                \t<div className=\"col-sm-10\">\n                \t\t<div className=\"card\">\n                \t\t\t<div className=\"card-header text-center\">Add Your Daily Task\n                \t\t\t\t<button onClick={this.addNewRow} type=\"button\" className=\"btn btn-primary float-right\"><FontAwesomeIcon icon={faPlus} /></button>\n                \t\t\t</div>\n                \t\t\t<div className=\"card-body\">\n                \t\t\t\t<Table className=\"table\">\n                                    <Thead>\n                                        <Tr>\n\t\t\t\t\t\t\t\t\t\t\t<Th>User ID</Th>\n                                            <Th className=\"required\" >Name</Th>\n                                            <Th className=\"required\" >Email\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" onChange={this.filterEmail}></input>\n\t\t\t\t\t\t\t\t\t\t\t</Th>\n                                            <Th>Message</Th>\n                                            {/* <Th>Status \n                                                <select name=\"taskStatus\"  className=\"form-control\" onChange={this.filterStatus} >\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value =\"all\">All</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"pending\">Pending</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"In Progress\">In Progress</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"Completed\">Completed</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"Hold\">Hold</option>\n\t\t\t\t\t\t\t\t\t\t\t\t</select>\n                                            </Th>\n                                            <Th>Action</Th> */}\n                                        </Tr>\n                                    </Thead>\n                                    <Tbody>\n                                        <AddLable taskList={taskList} delete={this.deleteRow.bind(this)}></AddLable>\n                                    \t{\n                                        \tloadComponent &&\n                                        \t<Fragment>\n\t                                        \t<Tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Td></Td>\n\t\t                                            <Td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" required name=\"projectName\" className=\"form-control\" onChange={this.handleChange} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" required name=\"task\" className=\"form-control\" onChange={this.handleChange} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<textarea required name=\"taskNotes\" className=\"form-control\" onChange={this.handleChange} ></textarea>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select name=\"taskStatus\"  className=\"form-control\" onChange={this.handleChange} >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"pending\">Pending</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"In Progress\">In Progress</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"Completed\">Completed</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"Hold\">Hold</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button  className=\"btn btn-success\"  onClick={(() => this.handleSubmit())}><FontAwesomeIcon icon={faCheck} /></button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-danger\" style={{marginTop:8}}><FontAwesomeIcon icon={faMinus} /></button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t</Tr>\n\t\t\t\t\t\t\t\t\t\t\t</Fragment>\n                                        }\n\n\t\t\t\t\t\t\t\t\t\t{/* {addData.map(row => (\n\t\t\t\t\t\t\t\t\t\t\t<Tr key={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Td>{row.id}</Td>\n\t\t\t\t\t\t\t\t\t\t\t\t<Td>{row.name}</Td>\n\t\t\t\t\t\t\t\t\t\t\t\t<Td>{row.email}</Td>\n\t\t\t\t\t\t\t\t\t\t\t\t<Td>{row.body}</Td>\n\t\t\t\t\t\t\t\t\t\t\t</Tr>\n\t\t\t\t\t\t\t\t\t\t))} */}\n\t\t\t\t\t\t\t\t\t\t<TableData taskList={currentPosts}></TableData>\n                                    </Tbody>\n                                </Table>\n\t\t\t\t\t\t\t\t<Pagination postPerPage={postPerPage} totalPosts={addData.length} paginate={paginate} nextPage={nextPage} prevPage={prevPage} ></Pagination>\n                \t\t\t</div>\t\n                \t\t</div>\n                \t</div>\n                </div>\t\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Form;","import React from 'react';\nimport './App.css';\n\nimport Form from './component/taskForm'\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div className=\"App\">\n          <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/fontawesome.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}