{"version":3,"sources":["component/taskList.js","component/taskForm.js","App.js","serviceWorker.js","index.js"],"names":["TaskList","props","taskList","map","val","idx","projectName","task","taskNotes","taskStatus","key","index","type","required","name","data-id","id","className","value","onClick","add","icon","faPlus","delete","faMinus","Form","state","Math","random","date","description","handleChange","e","includes","target","dataset","setState","handleSubmit","preventDefault","data","console","log","addNewRow","prevState","record","this","filter","r","onChange","onSubmit","style","marginTop","placeholder","clickOnDelete","bind","colSpan","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0869500b.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\n\nconst TaskList = (props) => {\n\treturn(\n\t\tprops.taskList.map((val, idx) => {\n\t\t\tlet projectName = `projectName-${idx}`, task = `task-${idx}`, taskNotes = `taskNotes-${idx}`, taskStatus = `taskStatus-${idx}`\n\t\t\treturn (\n\t\t\t\t<tr key={val.index}>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input type=\"text\" required name=\"projectName\" data-id={idx} id={projectName} className=\"form-control\" />\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input type=\"text\" required name=\"task\" data-id={idx} id={task} className=\"form-control\" />\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<textarea required name=\"taskNotes\" data-id={idx} id={taskNotes} className=\"form-control\"></textarea>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<select name=\"taskStatus\" id={taskStatus} data-id={idx} className=\"form-control\">\n\t\t\t\t\t\t\t<option value=\"pending\">Pending</option>\n\t\t\t\t\t\t\t<option value=\"In Progress\">In Progress</option>\n\t\t\t\t\t\t\t<option value=\"Completed\">Completed</option>\n\t\t\t\t\t\t\t<option value=\"Hold\">Hold</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx===0?<button onClick={()=>props.add()} type=\"button\" className=\"btn btn-primary text-center\"><FontAwesomeIcon icon={faPlus} /></button>\n\t\t\t\t\t\t\t:<button className=\"btn btn-danger\" onClick={(() => props.delete(val))} ><FontAwesomeIcon icon={faMinus} /></button>\n\t\t\t\t\t\t}\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\t\n\t\t\t)\n\t\t})\n\t)\n}\n\nexport default TaskList;","import React from \"react\";\nimport TaskList from \"./taskList\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCoffee, faPlus } from '@fortawesome/free-solid-svg-icons';\n\nclass Form extends React.Component {\n\tstate = {\n\t\ttaskList: [{index: Math.random(), projectName: \"\", task: \"\", taskNotes:\"\", taskStatus:\"\"}],\n\t\tdate: \"\",\n\t\tdescription: \"\",\t\n\t}\n\n\thandleChange = (e) => {\n\t\tif([\"projectName\", \"task\", \"taskNotes\", \"taskStatus\"].includes(e.target.name)) {\n\t\t\tlet TaskList = [...this.state.taskList]\n\t\t\tTaskList[e.target.dataset.id][e.target.name] = e.target.value;\n\t\t} else {\n\t\t\tthis.setState({ [e.target.name] : e.target.value})\n\t\t}\n\t}\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tlet data =  this.state\n\t\tconsole.log(data); \n\t}\n\n\taddNewRow = (e) => {\n\t\tthis.setState((prevState) => ({\n\t\t\ttaskList: [...prevState.taskList, {index: Math.random(), projectName: \"\", task: \"\", taskNotes:\"\", taskStatus:\"\"}]\n\t\t}));\n\t}\n\n\t// deleteRow = (index) => {\n\t// \tthis.setState({\n\t// \t\ttaskList: this.state.taskList.filter((s, sindex) => index !=sindex)\n\t// \t});\n\t// }\n\n\tclickOnDelete(record) {\n        this.setState({\n            taskList: this.state.taskList.filter(r => r !== record,)\n        });\n    }\n\n\n\trender(){\n\t\tlet {taskList} = this.state\n\t\treturn (\n\t\t\t<div className=\"content\">\n                <form onChange={this.handleChange} onSubmit={this.handleSubmit}>\n                \t<div className=\"row\" style={{marginTop:20}}>\n                \t\t// <div className=\"col-sm-1\"></div>\n                \t\t<div className=\"col-sm-10\">\n                \t\t\t<div className=\"card\">\n                \t\t\t\t<div className=\"card-header text-center\">Add Your Daily Task</div>\n                \t\t\t\t<div className=\"card-body\">\n                \t\t\t\t\t<div className=\"row\">\n                \t\t\t\t\t\t<div className=\"col-sm-4\">\n                \t\t\t\t\t\t\t<div className=\"form-group\">\n                \t\t\t\t\t\t\t\t<label>Date</label>\n                \t\t\t\t\t\t\t\t<input type=\"date\" required name=\"date\" id=\"date\" className=\"form-control\" placeholder=\"Enter Date\"/>\n                \t\t\t\t\t\t\t</div>\n                \t\t\t\t\t\t</div>\n                \t\t\t\t\t\t<div className=\"col-sm-4\">\n                \t\t\t\t\t\t\t<div className=\"form-group\">\n                \t\t\t\t\t\t\t\t<label>Description</label>\n                \t\t\t\t\t\t\t\t<textarea name=\"description\" id=\"description\" className=\"form-control\"></textarea>\n                \t\t\t\t\t\t\t</div>\n                \t\t\t\t\t\t</div>\n                \t\t\t\t\t</div>\n                \t\t\t\t\t<table className=\"table\">\n                                        <thead>\n                                            <tr>\n                                                <th className=\"required\" >Project Name</th>\n                                                <th className=\"required\" >Task</th>\n                                                <th>Notes</th>\n                                                <th>Status</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <TaskList delete={this.clickOnDelete.bind(this)} add={this.addNewRow}taskList={taskList} />\n                                        </tbody>\n                                        <tfoot>\n                                            <tr><td colSpan=\"4\">\n                                                <button onClick={this.addNewRow} type=\"button\" className=\"btn btn-primary text-center\"><FontAwesomeIcon icon={faPlus} /></button>\n                                            </td></tr>\n                                        </tfoot>\n                                    </table>\n                \t\t\t\t</div>\n                \t\t\t\t<div className=\"card-footer text-center\"> \n                \t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary text-center\">Submit</button>\n                \t\t\t\t</div>\t\n                \t\t\t</div>\n                \t\t</div>\n                \t</div>\t\n                </form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Form;","import React from 'react';\nimport './App.css';\n\nimport Form from './component/taskForm'\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div className=\"App\">\n          <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/fontawesome.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}